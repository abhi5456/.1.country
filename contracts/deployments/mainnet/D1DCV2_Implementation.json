{
  "address": "0x650b5E96c084CdB9FAE60bd42396ee6De9E39Bb5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "enum D1DCV2.EmojiType",
          "name": "emoji",
          "type": "uint8"
        }
      ],
      "name": "EmojiReactionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "renter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "NameRented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "renter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUrl",
          "type": "string"
        }
      ],
      "name": "URLUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "enum D1DCV2.EmojiType",
          "name": "emojiType",
          "type": "uint8"
        }
      ],
      "name": "addEmojiReaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "phone",
          "type": "string"
        }
      ],
      "name": "addOwnerInfo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRentalPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emailRevealPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "enum D1DCV2.EmojiType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "emojiReactionCounters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum D1DCV2.EmojiType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "emojiReactionPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishNameInitialization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getOwnerEmail",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getOwnerPhone",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getOwnerTelegram",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encodedName",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getRecordKeys",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_baseRentalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_rentalPeriod",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_priceMultiplier",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_telegramRevealPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_emailRevealPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phoneRevealPrice",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_names",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "renter",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timeUpdated",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "lastPrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prev",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "next",
              "type": "string"
            }
          ],
          "internalType": "struct D1DCV2.NameRecord[]",
          "name": "_records",
          "type": "tuple[]"
        }
      ],
      "name": "initializeNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keys",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCreated",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRented",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nameRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "renter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timeUpdated",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prev",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "next",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownersOfName",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phoneRevealPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceMultiplier",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "phone",
          "type": "string"
        }
      ],
      "name": "rent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentalPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "requestEmailReveal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "requestPhoneReveal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "requestTelegramReveal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseRentalPrice",
          "type": "uint256"
        }
      ],
      "name": "setBaseRentalPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emailRevealPrice",
          "type": "uint256"
        }
      ],
      "name": "setEmailPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum D1DCV2.EmojiType",
          "name": "_emojiType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_emojiPrice",
          "type": "uint256"
        }
      ],
      "name": "setEmojiPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_phoneRevealPrice",
          "type": "uint256"
        }
      ],
      "name": "setPhonePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_priceMultiplier",
          "type": "uint32"
        }
      ],
      "name": "setPriceMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rentalPeriod",
          "type": "uint32"
        }
      ],
      "name": "setRentalPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_telegramRevealPrice",
          "type": "uint256"
        }
      ],
      "name": "setTelegramPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "telegramRevealPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "updateURL",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "urlUpdatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x529bb295b845ae3779f4c351c4b561681e613654f96b7bf2703d6987deae7e6f",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0x650b5E96c084CdB9FAE60bd42396ee6De9E39Bb5",
    "transactionIndex": 0,
    "gasUsed": "4335985",
    "logsBloom": "0x
    "blockHash": "0x1ccdd73d2ed326c2ba1576900aa289ff7621f4669d934ada3135c7eb48c65289",
    "transactionHash": "0x529bb295b845ae3779f4c351c4b561681e613654f96b7bf2703d6987deae7e6f",
    "logs": [],
    "blockNumber": 35178212,
    "cumulativeGasUsed": "4335985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "21a2e7531ac11775ce154c5a5c20f6ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"enum D1DCV2.EmojiType\",\"name\":\"emoji\",\"type\":\"uint8\"}],\"name\":\"EmojiReactionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"NameRented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"URLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum D1DCV2.EmojiType\",\"name\":\"emojiType\",\"type\":\"uint8\"}],\"name\":\"addEmojiReaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"}],\"name\":\"addOwnerInfo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRentalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emailRevealPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum D1DCV2.EmojiType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"emojiReactionCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum D1DCV2.EmojiType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"emojiReactionPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishNameInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOwnerEmail\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOwnerPhone\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getOwnerTelegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encodedName\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRecordKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_baseRentalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_rentalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_priceMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_telegramRevealPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emailRevealPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phoneRevealPrice\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timeUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prev\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"next\",\"type\":\"string\"}],\"internalType\":\"struct D1DCV2.NameRecord[]\",\"name\":\"_records\",\"type\":\"tuple[]\"}],\"name\":\"initializeNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCreated\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRented\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timeUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prev\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"next\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownersOfName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phoneRevealPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMultiplier\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentalPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"requestEmailReveal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"requestPhoneReveal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"requestTelegramReveal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRentalPrice\",\"type\":\"uint256\"}],\"name\":\"setBaseRentalPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emailRevealPrice\",\"type\":\"uint256\"}],\"name\":\"setEmailPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum D1DCV2.EmojiType\",\"name\":\"_emojiType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_emojiPrice\",\"type\":\"uint256\"}],\"name\":\"setEmojiPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phoneRevealPrice\",\"type\":\"uint256\"}],\"name\":\"setPhonePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_priceMultiplier\",\"type\":\"uint32\"}],\"name\":\"setPriceMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rentalPeriod\",\"type\":\"uint32\"}],\"name\":\"setRentalPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_telegramRevealPrice\",\"type\":\"uint256\"}],\"name\":\"setTelegramPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegramRevealPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlUpdatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"John Whitton (github.com/johnwhitton), reviewed and revised by Aaron Li (github.com/polymorpher)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_emailRevealAt\":{\"details\":\"User -> Name -> Timestamp got the reval permission\"},\"_emailUpdateAt\":{\"details\":\"TokenId -> Timestamp the email info was updated\"},\"_ownerInfos\":{\"details\":\"TokenId -> OwnerInfo\"},\"_phoneRevealAt\":{\"details\":\"User -> Name -> Timestamp got the reval permission\"},\"_phoneUpdateAt\":{\"details\":\"TokenId -> Timestamp the phone info was updated\"},\"_telegramRevealAt\":{\"details\":\"User -> Name -> Timestamp got the reval permission\"},\"_telegramUpdateAt\":{\"details\":\"TokenId -> Timestamp the telegram info was updated\"},\"emailRevealPrice\":{\"details\":\"Price for the email reveal\"},\"emojiReactionCounters\":{\"details\":\"TokenId -> Emoji Type -> Counter\"},\"emojiReactionPrices\":{\"details\":\"Emoji Type -> Price\"},\"keys\":{\"details\":\"TokenId list\"},\"lastCreated\":{\"details\":\"Name created lastly\"},\"lastRented\":{\"details\":\"Name rented lastly\"},\"nameRecords\":{\"details\":\"TokenId -> NameRecord\"},\"ownersOfName\":{\"details\":\"TokenId -> Owner list\"},\"phoneRevealPrice\":{\"details\":\"Price for the phone reveal\"},\"telegramRevealPrice\":{\"details\":\"Price for the telegram reveal\"},\"urlUpdatePrice\":{\"details\":\"Price for the url update\"}},\"title\":\"A subdomain manager contract for .1.country (D1DC - Dot 1 Dot Country)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract allows the rental of domains under .1.country (\\u201dD1DC\\u201d) like \\u201cThe Million Dollar Homepage\\u201d: Anyone can take over a domain name by  browsing to a web2 address like foo.1.country and doubling its last price. Currently, a payer owns the domain only for `rentalPeriod`, and is allowed to embed a tweet for the web page. D1DC creates ERC721 tokens for each domain registration.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/D1DCV2.sol\":\"D1DCV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/D1DCV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\n\\n/**\\n    @title A subdomain manager contract for .1.country (D1DC - Dot 1 Dot Country)\\n    @author John Whitton (github.com/johnwhitton), reviewed and revised by Aaron Li (github.com/polymorpher)\\n    @notice This contract allows the rental of domains under .1.country (\\u201dD1DC\\u201d)\\n    like \\u201cThe Million Dollar Homepage\\u201d: Anyone can take over a domain name by \\n    browsing to a web2 address like foo.1.country and doubling its last price.\\n    Currently, a payer owns the domain only for `rentalPeriod`, and is allowed to embed a tweet for the web page.\\n    D1DC creates ERC721 tokens for each domain registration.\\n */\\ncontract D1DCV2 is ERC721Upgradeable, PausableUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    bool public nameInitialized;\\n    uint256 public baseRentalPrice;\\n    uint32 public rentalPeriod;\\n    uint32 public priceMultiplier;\\n    address public revenueAccount;\\n\\n    // TODO remove nameExists and replace logic with renter not equal to zero address\\n    struct NameRecord {\\n        address renter;\\n        uint32 timeUpdated;\\n        uint256 lastPrice;\\n        string url;\\n        string prev;\\n        string next;\\n    }\\n\\n    struct OwnerInfo {\\n        string telegram;\\n        string email;\\n        string phone;\\n    }\\n\\n    // Enum representing the emoji reactions\\n    enum EmojiType {\\n        ONE_ABOVE,\\n        FIRST_PRIZE,\\n        ONE_HUNDRED_PERCENT\\n    }\\n\\n    /// @dev TokenId -> NameRecord\\n    mapping(bytes32 => NameRecord) public nameRecords;\\n\\n    /// @dev TokenId -> OwnerInfo\\n    mapping(bytes32 => OwnerInfo) internal _ownerInfos;\\n\\n    /// @dev Emoji Type -> Price\\n    mapping(EmojiType => uint256) public emojiReactionPrices;\\n\\n    /// @dev TokenId -> Emoji Type -> Counter\\n    mapping(bytes32 => mapping(EmojiType => uint256)) public emojiReactionCounters;\\n\\n    /// @dev User -> Name -> Timestamp got the reval permission\\n    mapping(address => mapping(bytes32 => uint256)) internal _telegramRevealAt;\\n\\n    /// @dev User -> Name -> Timestamp got the reval permission\\n    mapping(address => mapping(bytes32 => uint256)) internal _emailRevealAt;\\n\\n    /// @dev User -> Name -> Timestamp got the reval permission\\n    mapping(address => mapping(bytes32 => uint256)) internal _phoneRevealAt;\\n\\n    /// @dev TokenId -> Timestamp the telegram info was updated\\n    mapping(bytes32 => uint256) internal _telegramUpdateAt;\\n\\n    /// @dev TokenId -> Timestamp the email info was updated\\n    mapping(bytes32 => uint256) internal _emailUpdateAt;\\n\\n    /// @dev TokenId -> Timestamp the phone info was updated\\n    mapping(bytes32 => uint256) internal _phoneUpdateAt;\\n\\n    /// @dev Name rented lastly\\n    string public lastRented;\\n\\n    /// @dev Name created lastly\\n    string public lastCreated;\\n\\n    /// @dev TokenId list\\n    bytes32[] public keys;\\n\\n    /// @dev Price for the url update\\n    uint256 public urlUpdatePrice;\\n\\n    /// @dev Price for the telegram reveal\\n    uint256 public telegramRevealPrice;\\n\\n    /// @dev Price for the email reveal\\n    uint256 public emailRevealPrice;\\n\\n    /// @dev Price for the phone reveal\\n    uint256 public phoneRevealPrice;\\n\\n    /// @dev TokenId -> Owner list\\n    mapping(bytes32 => address[]) public ownersOfName;\\n\\n    event NameRented(string indexed name, address indexed renter, uint256 price, string url);\\n    event URLUpdated(string indexed name, address indexed renter, string oldUrl, string newUrl);\\n    event RevenueAccountChanged(address from, address to);\\n    event EmojiReactionAdded(address indexed by, string indexed name, EmojiType indexed emoji);\\n\\n    //TODO create the EREC721 token at time of construction\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _baseRentalPrice,\\n        uint32 _rentalPeriod,\\n        uint32 _priceMultiplier,\\n        address _revenueAccount,\\n        uint256 _telegramRevealPrice,\\n        uint256 _emailRevealPrice,\\n        uint256 _phoneRevealPrice\\n    ) external initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Pausable_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        baseRentalPrice = _baseRentalPrice;\\n        rentalPeriod = _rentalPeriod;\\n        priceMultiplier = _priceMultiplier;\\n        revenueAccount = _revenueAccount;\\n        telegramRevealPrice = _telegramRevealPrice;\\n        emailRevealPrice = _emailRevealPrice;\\n        phoneRevealPrice = _phoneRevealPrice;\\n    }\\n\\n    function numRecords() public view returns (uint256){\\n        return keys.length;\\n    }\\n\\n    function getRecordKeys(uint256 start, uint256 end) public view returns (bytes32[] memory){\\n        require(end > start, \\\"D1DC: end must be greater than start\\\");\\n        bytes32[] memory slice = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            slice[i - start] = keys[i];\\n        }\\n        return slice;\\n    }\\n\\n    // admin functions\\n    function setBaseRentalPrice(uint256 _baseRentalPrice) public onlyOwner {\\n        baseRentalPrice = _baseRentalPrice;\\n    }\\n\\n    function setRentalPeriod(uint32 _rentalPeriod) public onlyOwner {\\n        rentalPeriod = _rentalPeriod;\\n    }\\n\\n    function setPriceMultiplier(uint32 _priceMultiplier) public onlyOwner {\\n        priceMultiplier = _priceMultiplier;\\n    }\\n\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    function setEmojiPrice(EmojiType _emojiType, uint256 _emojiPrice) public onlyOwner {\\n        emojiReactionPrices[_emojiType] = _emojiPrice;\\n    }\\n\\n    function setTelegramPrice(uint256 _telegramRevealPrice) external onlyOwner {\\n        telegramRevealPrice = _telegramRevealPrice;\\n    }\\n\\n    function setEmailPrice(uint256 _emailRevealPrice) external onlyOwner {\\n        emailRevealPrice = _emailRevealPrice;\\n    }\\n\\n    function setPhonePrice(uint256 _phoneRevealPrice) external onlyOwner {\\n        phoneRevealPrice = _phoneRevealPrice;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function initializeNames(string[] calldata _names, NameRecord[] calldata _records) external onlyOwner {\\n        require(!nameInitialized, \\\"D1DC: already initialized\\\");\\n        require(_names.length == _records.length, \\\"D1DC: unequal length\\\");\\n        for (uint256 i = 0; i < _records.length; i++) {\\n            bytes32 key = keccak256(bytes(_names[i]));\\n            nameRecords[key] = _records[i];\\n            keys.push(key);\\n            if (i >= 1 && bytes(nameRecords[key].prev).length == 0) {\\n                nameRecords[key].prev = _names[i - 1];\\n            }\\n            if (i < _records.length - 1 && bytes(nameRecords[key].next).length == 0) {\\n                nameRecords[key].next = _names[i + 1];\\n            }\\n        }\\n        lastCreated = _names[_names.length-1];\\n        lastRented = lastCreated;\\n    }\\n\\n    function finishNameInitialization() external onlyOwner {\\n        nameInitialized = true;\\n    }\\n\\n    // User functions\\n\\n    function getPrice(bytes32 encodedName) public view returns (uint256) {\\n        NameRecord storage nameRecord = nameRecords[encodedName];\\n        if (nameRecord.timeUpdated + rentalPeriod <= uint32(block.timestamp)) {\\n            return baseRentalPrice;\\n        }\\n        return nameRecord.renter == msg.sender ? nameRecord.lastPrice : nameRecord.lastPrice * priceMultiplier;\\n    }\\n\\n    function rent(string calldata name, string calldata url, string memory telegram, string memory email, string memory phone) public payable nonReentrant whenNotPaused {\\n        require(bytes(name).length <= 128, \\\"D1DC: name too long\\\");\\n        require(bytes(url).length <= 1024, \\\"D1DC: url too long\\\");\\n        uint256 tokenId = uint256(keccak256(bytes(name)));\\n        NameRecord storage nameRecord = nameRecords[bytes32(tokenId)];\\n        uint256 price = getPrice(bytes32(tokenId));\\n        require(price <= msg.value, \\\"D1DC: insufficient payment\\\");\\n\\n        address originalOwner = nameRecord.renter;\\n        nameRecord.renter = msg.sender;\\n        nameRecord.lastPrice = price;\\n        nameRecord.timeUpdated = uint32(block.timestamp);\\n\\n        if (bytes(url).length > 0) {\\n            nameRecord.url = url;\\n        }\\n\\n        lastRented = name;\\n\\n        if (_exists(tokenId)) {\\n            _safeTransfer(originalOwner, msg.sender, tokenId, \\\"\\\");\\n            // pay 90% to the original name owner\\n            uint256 priceForOwner = price * 90 / 100;\\n            (bool success,) = originalOwner.call{value : priceForOwner}(\\\"\\\");\\n            require(success, \\\"error sending ether\\\");\\n        } else {\\n            nameRecords[keccak256(bytes(lastCreated))].next = name;\\n            nameRecord.prev = lastCreated;\\n            lastCreated = name;\\n            _safeMint(msg.sender, tokenId);\\n        }\\n\\n        // since _afterTokenTransfer function removes the owner info, add it after transferring NFT\\n        OwnerInfo storage ownerInfo = _ownerInfos[bytes32(tokenId)];\\n        ownerInfo.telegram = telegram;\\n        ownerInfo.email = email;\\n        ownerInfo.phone = phone;\\n\\n        uint256 excess = msg.value - price;\\n        if (excess > 0) {\\n            (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n            require(success, \\\"cannot refund excess\\\");\\n        }\\n        emit NameRented(name, msg.sender, price, url);\\n    }\\n\\n    function updateURL(string calldata name, string calldata url) public payable nonReentrant whenNotPaused {\\n        require(nameRecords[keccak256(bytes(name))].renter == msg.sender, \\\"D1DC: not owner\\\");\\n        require(bytes(url).length <= 1024, \\\"D1DC: url too long\\\");\\n        emit URLUpdated(name, msg.sender, nameRecords[keccak256(bytes(name))].url, url);\\n        nameRecords[keccak256(bytes(name))].url = url;\\n\\n        // handle the payment\\n        uint256 price = urlUpdatePrice;\\n        require(price <= msg.value, \\\"D1DC: insufficient url payment\\\");\\n        uint256 excess = msg.value - price;\\n        if (excess > 0) {\\n            (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n            require(success, \\\"cannot refund excess\\\");\\n        }\\n    }\\n\\n    function addEmojiReaction(string memory name, EmojiType emojiType) external payable nonReentrant whenNotPaused {\\n        // add the emoji reaction\\n        ++emojiReactionCounters[keccak256(bytes(name))][emojiType];\\n\\n        // handle the payment\\n        uint256 price = emojiReactionPrices[emojiType];\\n        require(price <= msg.value, \\\"D1DC: insufficient emoji payment\\\");\\n\\n        address owner = nameRecords[keccak256(bytes(name))].renter;\\n        // pay 90% to the name owner\\n        uint256 priceForOwner = price * 90 / 100;\\n        (bool success,) = owner.call{value : priceForOwner}(\\\"\\\");\\n        require(success, \\\"error sending ether\\\");\\n\\n        uint256 excess = msg.value - price;\\n        if (excess > 0) {\\n            (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n            require(success, \\\"cannot refund excess\\\");\\n        }\\n\\n        emit EmojiReactionAdded(msg.sender, name, emojiType);\\n    }\\n\\n    function addOwnerInfo(string memory name, string memory telegram, string memory email, string memory phone) external payable nonReentrant whenNotPaused {\\n        bytes32 tokenId = keccak256(bytes(name));\\n        uint256 price = msg.value;\\n\\n        if (bytes(telegram).length != 0) {\\n            require(telegramRevealPrice <= price, \\\"D1DC: insufficient personal info payment\\\");\\n            price -= telegramRevealPrice;\\n            _ownerInfos[tokenId].telegram = telegram;\\n            _telegramRevealAt[msg.sender][tokenId] = block.timestamp;\\n        }\\n\\n        if (bytes(email).length != 0) {\\n            require(emailRevealPrice <= price, \\\"D1DC: insufficient personal info payment\\\");\\n            price -= emailRevealPrice;\\n            _ownerInfos[tokenId].email = email;\\n            _emailRevealAt[msg.sender][tokenId] = block.timestamp;\\n        }\\n\\n        if (bytes(phone).length != 0) {\\n            require(phoneRevealPrice <= price, \\\"D1DC: insufficient personal info payment\\\");\\n            price -= emailRevealPrice;\\n            _ownerInfos[tokenId].email = email;\\n            _phoneRevealAt[msg.sender][tokenId] = block.timestamp;\\n        }\\n\\n        if (price > 0) {\\n            (bool success,) = msg.sender.call{value : price}(\\\"\\\");\\n            require(success, \\\"cannot refund excess\\\");\\n        }\\n    }\\n\\n    function requestTelegramReveal(string calldata name) external payable nonReentrant whenNotPaused {\\n        uint256 price = telegramRevealPrice;\\n        require(price <= msg.value, \\\"D1DC: insufficient telegram payment\\\");\\n\\n        bytes32 tokenId = keccak256(bytes(name));\\n        address owner = nameRecords[tokenId].renter;\\n        require(owner != msg.sender, \\\"D1DC: self reveal for telegram\\\");\\n        if (_telegramRevealAt[msg.sender][tokenId] <= _telegramUpdateAt[tokenId]) {\\n            _telegramRevealAt[msg.sender][tokenId] =block.timestamp;\\n            (bool success,) = owner.call{value : price}(\\\"\\\");\\n            require(success, \\\"error sending ether\\\");\\n\\n            // returns the exceeded payment\\n            uint256 excess = msg.value - price;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        } else {\\n            // since the requester already has the permission, returns the all payment\\n            uint256 excess = msg.value;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        }\\n    }\\n\\n    function requestEmailReveal(string calldata name) external payable nonReentrant whenNotPaused {\\n        uint256 price = emailRevealPrice;\\n        require(price <= msg.value, \\\"D1DC: insufficient email payment\\\");\\n\\n        bytes32 tokenId = keccak256(bytes(name));\\n        address owner = nameRecords[tokenId].renter;\\n        require(owner != msg.sender, \\\"D1DC: self reveal for email\\\");\\n        if (_emailRevealAt[msg.sender][tokenId] <= _emailUpdateAt[tokenId]) {\\n            _emailRevealAt[msg.sender][tokenId] = block.timestamp;\\n            (bool success,) = owner.call{value : price}(\\\"\\\");\\n            require(success, \\\"error sending ether\\\");\\n\\n            // returns the exceeded payment\\n            uint256 excess = msg.value - price;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        } else {\\n            // since the requester already has the permission, returns the all payment\\n            uint256 excess = msg.value;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        }\\n    }\\n\\n    function requestPhoneReveal(string calldata name) external payable nonReentrant whenNotPaused {\\n        uint256 price = phoneRevealPrice;\\n        require(price <= msg.value, \\\"D1DC: insufficient phone payment\\\");\\n\\n        bytes32 tokenId = keccak256(bytes(name));\\n        address owner = nameRecords[tokenId].renter;\\n        require(owner != msg.sender, \\\"D1DC: self reveal for phone\\\");\\n        if (_phoneRevealAt[msg.sender][tokenId] <= _phoneUpdateAt[tokenId]) {\\n            _phoneRevealAt[msg.sender][tokenId] = block.timestamp;\\n            (bool success,) = owner.call{value : price}(\\\"\\\");\\n            require(success, \\\"error sending ether\\\");\\n\\n            // returns the exceeded payment\\n            uint256 excess = msg.value - price;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        } else {\\n            // since the requester already has the permission, returns the all payment\\n            uint256 excess = msg.value;\\n            if (excess > 0) {\\n                (bool success,) = msg.sender.call{value : excess}(\\\"\\\");\\n                require(success, \\\"cannot refund excess\\\");\\n            }\\n        }\\n        \\n    }\\n\\n    function getOwnerTelegram(string calldata name) external returns (string memory) {\\n        address owner = nameRecords[keccak256(bytes(name))].renter;\\n        bytes32 tokenId = keccak256(bytes(name));\\n        if (msg.sender != owner) {\\n            require(_telegramUpdateAt[tokenId] < _telegramRevealAt[msg.sender][tokenId], \\\"D1DC: no permission for telegram reveal\\\");\\n        }\\n\\n        return _ownerInfos[tokenId].telegram;\\n    }\\n\\n    function getOwnerEmail(string calldata name) external returns (string memory) {\\n        address owner = nameRecords[keccak256(bytes(name))].renter;\\n        bytes32 tokenId = keccak256(bytes(name));\\n        if (msg.sender != owner) {\\n            require(_emailUpdateAt[tokenId] < _emailRevealAt[msg.sender][tokenId], \\\"D1DC: no permission for email reveal\\\");\\n        }\\n\\n        return _ownerInfos[tokenId].email;\\n    }\\n\\n    function getOwnerPhone(string calldata name) external returns (string memory) {\\n        address owner = nameRecords[keccak256(bytes(name))].renter;\\n        bytes32 tokenId = keccak256(bytes(name));\\n        if (msg.sender != owner) {\\n            require(_phoneUpdateAt[tokenId] < _phoneRevealAt[msg.sender][tokenId], \\\"D1DC: no permission for phone reveal\\\");\\n        }\\n\\n        return _ownerInfos[tokenId].phone;\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal override virtual {\\n        bytes32 tokenId = bytes32(firstTokenId);\\n        NameRecord storage nameRecord = nameRecords[tokenId];\\n        nameRecord.renter = to;\\n        \\n        // reset the owner info\\n        OwnerInfo storage ownerInfo = _ownerInfos[tokenId];\\n        ownerInfo.telegram = \\\"\\\";\\n        ownerInfo.email = \\\"\\\";\\n        ownerInfo.phone = \\\"\\\";\\n\\n        // update the owner update timestamp\\n        _telegramUpdateAt[tokenId] = block.timestamp;\\n        _emailUpdateAt[tokenId] = block.timestamp;\\n        _phoneUpdateAt[tokenId] = block.timestamp;\\n\\n        // update the owner list\\n        ownersOfName[tokenId].push(to);\\n    }\\n\\n    function withdraw() external {\\n        require(msg.sender == owner() || msg.sender == revenueAccount, \\\"D1DC: must be owner or revenue account\\\");\\n        (bool success,) = revenueAccount.call{value : address(this).balance}(\\\"\\\");\\n        require(success, \\\"D1DC: failed to withdraw\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x79adf6fe02785960b85d3e724bbcc9a2594b8764e056469abfcb4e5b139bb695\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d7b806100206000396000f3fe6080604052600436106103975760003560e01c80637528b89c116101dc578063b88d4fde11610102578063dbafb570116100a0578063f2fde38b1161006f578063f2fde38b14610a84578063f5dc7d5614610aa4578063f623b7af14610acc578063fcb11ff614610adf57600080fd5b8063dbafb570146109c9578063e8bdcc09146109e9578063e985e9c514610a09578063eb75204214610a5257600080fd5b8063c87b56dd116100dc578063c87b56dd1461094c578063d22da0751461096c578063d3a3270c14610983578063d50cb88b146109a357600080fd5b8063b88d4fde146108de578063c218c591146108fe578063c22a31011461091e57600080fd5b80638c4b84751161017a578063a22cb46511610149578063a22cb46514610873578063afff5a6414610893578063b5d1990d146108a8578063b7b9d696146108be57600080fd5b80638c4b8475146107fa5780638da5cb5b1461082d57806395d89b411461084b578063a1a0c1bc1461086057600080fd5b80638456cb59116101b65780638456cb591461078e5780638789fcc1146107a35780638a5cab27146107ba5780638ab01168146107da57600080fd5b80637528b89c146107335780637e1afcb51461074e578063839e5f781461077b57600080fd5b80633ccfd60b116102c157806361921a2a1161025f5780636c863bc21161022e5780636c863bc2146106cb57806370a08231146106eb578063715018a61461070b57806374edae171461072057600080fd5b806361921a2a1461063b5780636352211e14610652578063649cde291461067257806368b2210d146106ab57600080fd5b806348ff2e7c1161029b57806348ff2e7c146105db5780634e84bd4a146105fb5780635b8e99dc146106105780635c975abb1461062357600080fd5b80633ccfd60b146105915780633f4ba83a146105a657806342842e0e146105bb57600080fd5b80630f75e5c01161033957806323b872dd1161030857806323b872dd1461051e5780632745edba1461053e57806330027f3b1461055157806331d98b3f1461057157600080fd5b80630f75e5c0146104bb5780630f77bcfb146104d2578063159171dd146104e95780632143f93b1461050957600080fd5b8063081812fc11610375578063081812fc14610415578063095ea7b31461044d5780630b3a8d951461046d5780630cb6aaf11461048d57600080fd5b806301ffc9a71461039c57806306b0c389146103d157806306fdde03146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b7366004613c36565b610af2565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103f16103ec366004613d35565b610b44565b005b3480156103ff57600080fd5b50610408610ce1565b6040516103c89190613e45565b34801561042157600080fd5b50610435610430366004613e58565b610d73565b6040516001600160a01b0390911681526020016103c8565b34801561045957600080fd5b506103f1610468366004613e71565b610d9a565b34801561047957600080fd5b50610408610488366004613ee5565b610eaf565b34801561049957600080fd5b506104ad6104a8366004613e58565b611049565b6040519081526020016103c8565b3480156104c757600080fd5b506104ad61012e5481565b3480156104de57600080fd5b506104ad6101405481565b3480156104f557600080fd5b506103f1610504366004613f26565b61106b565b34801561051557600080fd5b50610408611090565b34801561052a57600080fd5b506103f1610539366004613f43565b61111f565b6103f161054c366004613f84565b611150565b34801561055d57600080fd5b506103f161056c366004614030565b611359565b34801561057d57600080fd5b506104ad61058c366004613e58565b6113dd565b34801561059d57600080fd5b506103f161146b565b3480156105b257600080fd5b506103f161159f565b3480156105c757600080fd5b506103f16105d6366004613f43565b6115b1565b3480156105e757600080fd5b506103f16105f6366004613e58565b6115cc565b34801561060757600080fd5b506103f16115da565b6103f161061e36600461405c565b6115f2565b34801561062f57600080fd5b5060975460ff166103bc565b34801561064757600080fd5b506104ad61013f5481565b34801561065e57600080fd5b5061043561066d366004613e58565b61187f565b34801561067e57600080fd5b506104ad61068d3660046140a9565b61013360209081526000928352604080842090915290825290205481565b3480156106b757600080fd5b506104086106c6366004613ee5565b6118df565b3480156106d757600080fd5b506104086106e6366004613ee5565b6119f0565b3480156106f757600080fd5b506104ad610706366004614030565b611b01565b34801561071757600080fd5b506103f1611b87565b6103f161072e366004613ee5565b611b99565b34801561073f57600080fd5b5061012d546103bc9060ff1681565b34801561075a57600080fd5b5061076e6107693660046140cc565b611e48565b6040516103c891906140ee565b6103f1610789366004614132565b611f5f565b34801561079a57600080fd5b506103f1612174565b3480156107af57600080fd5b506104ad61013e5481565b3480156107c657600080fd5b506103f16107d5366004613e58565b612184565b3480156107e657600080fd5b506103f16107f5366004613f26565b612192565b34801561080657600080fd5b5061012f546108189063ffffffff1681565b60405163ffffffff90911681526020016103c8565b34801561083957600080fd5b5060c9546001600160a01b0316610435565b34801561085757600080fd5b506104086121c3565b6103f161086e366004613ee5565b6121d2565b34801561087f57600080fd5b506103f161088e36600461419d565b61231d565b34801561089f57600080fd5b50610408612328565b3480156108b457600080fd5b5061013c546104ad565b3480156108ca57600080fd5b506103f16108d93660046141db565b612336565b3480156108ea57600080fd5b506103f16108f93660046141f7565b61237c565b34801561090a57600080fd5b506103f1610919366004613e58565b6123ae565b34801561092a57600080fd5b506104ad61093936600461426a565b6101326020526000908152604090205481565b34801561095857600080fd5b50610408610967366004613e58565b6123bc565b34801561097857600080fd5b506104ad61013d5481565b34801561098f57600080fd5b5061043561099e3660046140cc565b61242f565b3480156109af57600080fd5b5061012f5461081890640100000000900463ffffffff1681565b3480156109d557600080fd5b506103f16109e4366004613e58565b612468565b3480156109f557600080fd5b506103f1610a043660046142c9565b612476565b348015610a1557600080fd5b506103bc610a24366004614328565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610a5e57600080fd5b50610a72610a6d366004613e58565b612745565b6040516103c896959493929190614356565b348015610a9057600080fd5b506103f1610a9f366004614030565b612925565b348015610ab057600080fd5b5061012f5461043590600160401b90046001600160a01b031681565b6103f1610ada3660046143bc565b61299b565b6103f1610aed366004613ee5565b612d7c565b60006001600160e01b031982166380ac58cd60e01b1480610b2357506001600160e01b03198216635b5e139f60e01b145b80610b3e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff1615808015610b645750600054600160ff909116105b80610b7e5750303b158015610b7e575060005460ff166001145b610be65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610c09576000805461ff0019166101001790555b610c138a8a612ed3565b610c1b612f04565b610c23612f33565b610c2b612f62565b61012e88905561012f80546001600160a01b038716600160401b02600160401b600160e01b031963ffffffff8a81166401000000000267ffffffffffffffff19909416908c1617929092179190911617905561013e84905561013f8390556101408290558015610cd5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b606060658054610cf090614498565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1c90614498565b8015610d695780601f10610d3e57610100808354040283529160200191610d69565b820191906000526020600020905b815481529060010190602001808311610d4c57829003601f168201915b5050505050905090565b6000610d7e82612f91565b506000908152606960205260409020546001600160a01b031690565b6000610da58261187f565b9050806001600160a01b0316836001600160a01b031603610e125760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bdd565b336001600160a01b0382161480610e2e5750610e2e8133610a24565b610ea05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bdd565b610eaa8383612ff0565b505050565b6060600061013060008585604051610ec89291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b0316905060008484604051610f099291906144d2565b6040519081900390209050336001600160a01b03831614610fa757336000908152610134602090815260408083208484528252808320546101379092529091205410610fa75760405162461bcd60e51b815260206004820152602760248201527f443144433a206e6f207065726d697373696f6e20666f722074656c656772616d604482015266081c995d99585b60ca1b6064820152608401610bdd565b6000818152610131602052604090208054610fc190614498565b80601f0160208091040260200160405190810160405280929190818152602001828054610fed90614498565b801561103a5780601f1061100f5761010080835404028352916020019161103a565b820191906000526020600020905b81548152906001019060200180831161101d57829003601f168201915b50505050509250505092915050565b61013c818154811061105a57600080fd5b600091825260209091200154905081565b61107361305e565b61012f805463ffffffff191663ffffffff92909216919091179055565b61013a805461109e90614498565b80601f01602080910402602001604051908101604052809291908181526020018280546110ca90614498565b80156111175780601f106110ec57610100808354040283529160200191611117565b820191906000526020600020905b8154815290600101906020018083116110fa57829003601f168201915b505050505081565b61112933826130b8565b6111455760405162461bcd60e51b8152600401610bdd906144e2565b610eaa838383613137565b6111586132b0565b611160613309565b8351602085012083513490156111dd578061013e5411156111935760405162461bcd60e51b8152600401610bdd9061452f565b61013e546111a1908261458d565b6000838152610131602052604090209091506111bd8682614603565b503360009081526101346020908152604080832085845290915290204290555b835115611254578061013f5411156112075760405162461bcd60e51b8152600401610bdd9061452f565b61013f54611215908261458d565b6000838152610131602052604090209091506001016112348582614603565b503360009081526101356020908152604080832085845290915290204290555b8251156112cb578061014054111561127e5760405162461bcd60e51b8152600401610bdd9061452f565b61013f5461128c908261458d565b6000838152610131602052604090209091506001016112ab8582614603565b503360009081526101366020908152604080832085845290915290204290555b8015611347576000336001600160a01b0316826040515b60006040518083038185875af1925050503d806000811461131f576040519150601f19603f3d011682016040523d82523d6000602084013e611324565b606091505b50509050806113455760405162461bcd60e51b8152600401610bdd906146bc565b505b5050611353600160fb55565b50505050565b61136161305e565b61012f54604080516001600160a01b03600160401b9093048316815291831660208301527fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec7307910160405180910390a161012f80546001600160a01b03909216600160401b02600160401b600160e01b0319909216919091179055565b60008181526101306020526040812061012f54815463ffffffff428116926114119290821691600160a01b909104166146ea565b63ffffffff161161142757505061012e54919050565b80546001600160a01b0316331461145e5761012f54600182015461145991640100000000900463ffffffff169061470e565b611464565b80600101545b9392505050565b60c9546001600160a01b0316331480611496575061012f54600160401b90046001600160a01b031633145b6114f15760405162461bcd60e51b815260206004820152602660248201527f443144433a206d757374206265206f776e6572206f7220726576656e7565206160448201526518d8dbdd5b9d60d21b6064820152608401610bdd565b61012f54604051600091600160401b90046001600160a01b03169047908381818185875af1925050503d8060008114611546576040519150601f19603f3d011682016040523d82523d6000602084013e61154b565b606091505b505090508061159c5760405162461bcd60e51b815260206004820152601860248201527f443144433a206661696c656420746f20776974686472617700000000000000006044820152606401610bdd565b50565b6115a761305e565b6115af613356565b565b610eaa8383836040518060200160405280600081525061237c565b6115d461305e565b61013f55565b6115e261305e565b61012d805460ff19166001179055565b6115fa6132b0565b611602613309565b610133600083805190602001208152602001908152602001600020600082600281111561163157611631614725565b600281111561164257611642614725565b81526020019081526020016000206000815461165d9061473b565b9091555060006101328183600281111561167957611679614725565b600281111561168a5761168a614725565b8152602001908152602001600020549050348111156116eb5760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e7420656d6f6a69207061796d656e746044820152606401610bdd565b8251602080850191909120600090815261013090915260408120546001600160a01b031690606461171d84605a61470e565b6117279190614754565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611776576040519150601f19603f3d011682016040523d82523d6000602084013e61177b565b606091505b505090508061179c5760405162461bcd60e51b8152600401610bdd90614776565b60006117a8853461458d565b9050801561181a57604051600090339083908381818185875af1925050503d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50509050806118185760405162461bcd60e51b8152600401610bdd906146bc565b505b85600281111561182c5761182c614725565b8760405161183a91906147a3565b6040519081900381209033907f852605dcec8d6bf5f3c46c20fe8e730e7096150f02450555fed4aa4298158bae90600090a4505050505061187b600160fb55565b5050565b6000818152606760205260408120546001600160a01b031680610b3e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bdd565b60606000610130600085856040516118f89291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600084846040516119399291906144d2565b6040519081900390209050336001600160a01b038316146119d3573360009081526101356020908152604080832084845282528083205461013890925290912054106119d35760405162461bcd60e51b8152602060048201526024808201527f443144433a206e6f207065726d697373696f6e20666f7220656d61696c2072656044820152631d99585b60e21b6064820152608401610bdd565b6000818152610131602052604090206001018054610fc190614498565b6060600061013060008585604051611a099291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b0316905060008484604051611a4a9291906144d2565b6040519081900390209050336001600160a01b03831614611ae457336000908152610136602090815260408083208484528252808320546101399092529091205410611ae45760405162461bcd60e51b8152602060048201526024808201527f443144433a206e6f207065726d697373696f6e20666f722070686f6e652072656044820152631d99585b60e21b6064820152608401610bdd565b6000818152610131602052604090206002018054610fc190614498565b60006001600160a01b038216611b6b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610bdd565b506001600160a01b031660009081526068602052604090205490565b611b8f61305e565b6115af60006133a8565b611ba16132b0565b611ba9613309565b6101405434811115611bfd5760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e742070686f6e65207061796d656e746044820152606401610bdd565b60008383604051611c0f9291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b0316338103611c855760405162461bcd60e51b815260206004820152601b60248201527f443144433a2073656c662072657665616c20666f722070686f6e6500000000006044820152606401610bdd565b6000828152610139602090815260408083205433845261013683528184208685529092529091205411611dc85733600090815261013660209081526040808320858452909152808220429055516001600160a01b0383169085905b60006040518083038185875af1925050503d8060008114611d1d576040519150601f19603f3d011682016040523d82523d6000602084013e611d22565b606091505b5050905080611d435760405162461bcd60e51b8152600401610bdd90614776565b6000611d4f853461458d565b90508015611dc157604051600090339083908381818185875af1925050503d8060008114611d99576040519150601f19603f3d011682016040523d82523d6000602084013e611d9e565b606091505b5050905080611dbf5760405162461bcd60e51b8152600401610bdd906146bc565b505b5050611e3b565b348015611e3957604051600090339083908381818185875af1925050503d8060008114611e11576040519150601f19603f3d011682016040523d82523d6000602084013e611e16565b606091505b5050905080611e375760405162461bcd60e51b8152600401610bdd906146bc565b505b505b50505061187b600160fb55565b6060828211611ea55760405162461bcd60e51b8152602060048201526024808201527f443144433a20656e64206d7573742062652067726561746572207468616e20736044820152631d185c9d60e21b6064820152608401610bdd565b6000611eb1848461458d565b6001600160401b03811115611ec857611ec8613c53565b604051908082528060200260200182016040528015611ef1578160200160208202803683370190505b509050835b83811015611f575761013c8181548110611f1257611f126147bf565b9060005260206000200154828683611f2a919061458d565b81518110611f3a57611f3a6147bf565b602090810291909101015280611f4f8161473b565b915050611ef6565b509392505050565b611f676132b0565b611f6f613309565b336001600160a01b031661013060008686604051611f8e9291906144d2565b60408051918290039091208252602082019290925201600020546001600160a01b031614611ff05760405162461bcd60e51b815260206004820152600f60248201526e2218a2219d103737ba1037bbb732b960891b6044820152606401610bdd565b6104008111156120375760405162461bcd60e51b8152602060048201526012602482015271443144433a2075726c20746f6f206c6f6e6760701b6044820152606401610bdd565b604051339061204990869086906144d2565b60405180910390207f096f0aee78aea5199be1c1bf75f83f8c98e7002651030cbe56c0ca959cdd24c5610130600088886040516120879291906144d2565b6040518091039020815260200190815260200160002060020185856040516120b1939291906147fe565b60405180910390a38181610130600087876040516120d09291906144d2565b6040518091039020815260200190815260200160002060020191826120f692919061489f565b5061013d543481111561214b5760405162461bcd60e51b815260206004820152601e60248201527f443144433a20696e73756666696369656e742075726c207061796d656e7400006044820152606401610bdd565b6000612157823461458d565b90508015611347576000336001600160a01b0316826040516112e2565b61217c61305e565b6115af6133fa565b61218c61305e565b61014055565b61219a61305e565b61012f805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b606060668054610cf090614498565b6121da6132b0565b6121e2613309565b61013f54348111156122365760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e7420656d61696c207061796d656e746044820152606401610bdd565b600083836040516122489291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b03163381036122be5760405162461bcd60e51b815260206004820152601b60248201527f443144433a2073656c662072657665616c20666f7220656d61696c00000000006044820152606401610bdd565b6000828152610138602090815260408083205433845261013583528184208685529092529091205411611dc85733600090815261013560209081526040808320858452909152808220429055516001600160a01b038316908590611ce0565b61187b338383613437565b61013b805461109e90614498565b61233e61305e565b80610132600084600281111561235657612356614725565b600281111561236757612367614725565b81526020810191909152604001600020555050565b61238633836130b8565b6123a25760405162461bcd60e51b8152600401610bdd906144e2565b61135384848484613505565b6123b661305e565b61013e55565b60606123c782612f91565b60006123de60408051602081019091526000815290565b905060008151116123fe5760405180602001604052806000815250611464565b8061240884613538565b604051602001612419929190614958565b6040516020818303038152906040529392505050565b610141602052816000526040600020818154811061244c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b61247061305e565b61012e55565b61247e61305e565b61012d5460ff16156124d25760405162461bcd60e51b815260206004820152601960248201527f443144433a20616c726561647920696e697469616c697a6564000000000000006044820152606401610bdd565b8281146125185760405162461bcd60e51b81526020600482015260146024820152730886288867440eadccae2eac2d840d8cadccee8d60631b6044820152606401610bdd565b60005b818110156126f0576000858583818110612537576125376147bf565b90506020028101906125499190614987565b6040516125579291906144d2565b60405180910390209050838383818110612573576125736147bf565b905060200281019061258591906149cd565b60008281526101306020526040902061259e82826149e3565b505061013c8054600181810183556000929092527fa55c1639d917d7b7cbf3837f1642937d4507076edbe26b1a6008234bb0c49530018290558210801590612602575060008181526101306020526040902060030180546125fe90614498565b1590505b1561265557858561261460018561458d565b818110612623576126236147bf565b90506020028101906126359190614987565b6000838152610130602052604090206003019161265391908361489f565b505b61266060018461458d565b8210801561268a5750600081815261013060205260409020600401805461268690614498565b1590505b156126dd57858561269c846001614a9b565b8181106126ab576126ab6147bf565b90506020028101906126bd9190614987565b600083815261013060205260409020600401916126db91908361489f565b505b50806126e88161473b565b91505061251b565b5083836126fe60018261458d565b81811061270d5761270d6147bf565b905060200281019061271f9190614987565b61013b9161272e91908361489f565b5061013a61273e61013b82614aae565b5050505050565b610130602052600090815260409020805460018201546002830180546001600160a01b03841694600160a01b90940463ffffffff1693919061278690614498565b80601f01602080910402602001604051908101604052809291908181526020018280546127b290614498565b80156127ff5780601f106127d4576101008083540402835291602001916127ff565b820191906000526020600020905b8154815290600101906020018083116127e257829003601f168201915b50505050509080600301805461281490614498565b80601f016020809104026020016040519081016040528092919081815260200182805461284090614498565b801561288d5780601f106128625761010080835404028352916020019161288d565b820191906000526020600020905b81548152906001019060200180831161287057829003601f168201915b5050505050908060040180546128a290614498565b80601f01602080910402602001604051908101604052809291908181526020018280546128ce90614498565b801561291b5780601f106128f05761010080835404028352916020019161291b565b820191906000526020600020905b8154815290600101906020018083116128fe57829003601f168201915b5050505050905086565b61292d61305e565b6001600160a01b0381166129925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bdd565b61159c816133a8565b6129a36132b0565b6129ab613309565b60808611156129f25760405162461bcd60e51b8152602060048201526013602482015272443144433a206e616d6520746f6f206c6f6e6760681b6044820152606401610bdd565b610400841115612a395760405162461bcd60e51b8152602060048201526012602482015271443144433a2075726c20746f6f206c6f6e6760701b6044820152606401610bdd565b60008787604051612a4b9291906144d2565b6040805191829003909120600081815261013060205291822090925090612a71836113dd565b905034811115612ac35760405162461bcd60e51b815260206004820152601a60248201527f443144433a20696e73756666696369656e74207061796d656e740000000000006044820152606401610bdd565b81546001830182905563ffffffff4216600160a01b0263ffffffff60a01b1933166001600160c01b03198316171783556001600160a01b03168715612b135760028301612b11898b8361489f565b505b61013a612b218b8d8361489f565b506000848152606760205260409020546001600160a01b031615612bef57612b5a81338660405180602001604052806000815250613505565b60006064612b6984605a61470e565b612b739190614754565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612bc2576040519150601f19603f3d011682016040523d82523d6000602084013e612bc7565b606091505b5050905080612be85760405162461bcd60e51b8152600401610bdd90614776565b5050612c57565b8a8a610130600061013b604051612c069190614b7a565b604051809103902081526020019081526020016000206004019182612c2c92919061489f565b5060038301612c3d61013b82614aae565b5061013b612c4c8b8d8361489f565b50612c5733856135ca565b60008481526101316020526040902080612c718982614603565b5060018101612c808882614603565b5060028101612c8f8782614603565b506000612c9c843461458d565b90508015612d0e57604051600090339083908381818185875af1925050503d8060008114612ce6576040519150601f19603f3d011682016040523d82523d6000602084013e612ceb565b606091505b5050905080612d0c5760405162461bcd60e51b8152600401610bdd906146bc565b505b6040513390612d20908f908f906144d2565b60405180910390207ff1d86ac814e2a6b7710c558956057aa8ca4d67a2b19ea13b9dc84c92945c9896868e8e604051612d5b93929190614bf0565b60405180910390a3505050505050612d73600160fb55565b50505050505050565b612d846132b0565b612d8c613309565b61013e5434811115612dec5760405162461bcd60e51b815260206004820152602360248201527f443144433a20696e73756666696369656e742074656c656772616d207061796d604482015262195b9d60ea1b6064820152608401610bdd565b60008383604051612dfe9291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b0316338103612e745760405162461bcd60e51b815260206004820152601e60248201527f443144433a2073656c662072657665616c20666f722074656c656772616d00006044820152606401610bdd565b6000828152610137602090815260408083205433845261013483528184208685529092529091205411611dc85733600090815261013460209081526040808320858452909152808220429055516001600160a01b038316908590611ce0565b600054610100900460ff16612efa5760405162461bcd60e51b8152600401610bdd90614c13565b61187b82826135e4565b600054610100900460ff16612f2b5760405162461bcd60e51b8152600401610bdd90614c13565b6115af613624565b600054610100900460ff16612f5a5760405162461bcd60e51b8152600401610bdd90614c13565b6115af613657565b600054610100900460ff16612f895760405162461bcd60e51b8152600401610bdd90614c13565b6115af613687565b6000818152606760205260409020546001600160a01b031661159c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bdd565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906130258261187f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c9546001600160a01b031633146115af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bdd565b6000806130c48361187f565b9050806001600160a01b0316846001600160a01b0316148061310b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061312f5750836001600160a01b031661312484610d73565b6001600160a01b0316145b949350505050565b826001600160a01b031661314a8261187f565b6001600160a01b0316146131705760405162461bcd60e51b8152600401610bdd90614c5e565b6001600160a01b0382166131d25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bdd565b6131df83838360016136ae565b826001600160a01b03166131f28261187f565b6001600160a01b0316146132185760405162461bcd60e51b8152600401610bdd90614c5e565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610eaa8383836001613736565b600260fb54036133025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bdd565b600260fb55565b60975460ff16156115af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610bdd565b600160fb55565b61335e613828565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613402613309565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861338b3390565b816001600160a01b0316836001600160a01b0316036134985760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bdd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613510848484613137565b61351c84848484613871565b6113535760405162461bcd60e51b8152600401610bdd90614ca3565b6060600061354583613972565b60010190506000816001600160401b0381111561356457613564613c53565b6040519080825280601f01601f19166020018201604052801561358e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461359857509392505050565b61187b828260405180602001604052806000815250613a4a565b600054610100900460ff1661360b5760405162461bcd60e51b8152600401610bdd90614c13565b60656136178382614603565b506066610eaa8282614603565b600054610100900460ff1661364b5760405162461bcd60e51b8152600401610bdd90614c13565b6097805460ff19169055565b600054610100900460ff1661367e5760405162461bcd60e51b8152600401610bdd90614c13565b6115af336133a8565b600054610100900460ff1661334f5760405162461bcd60e51b8152600401610bdd90614c13565b6001811115611353576001600160a01b038416156136f4576001600160a01b038416600090815260686020526040812080548392906136ee90849061458d565b90915550505b6001600160a01b03831615611353576001600160a01b0383166000908152606860205260408120805483929061372b908490614a9b565b909155505050505050565b60008281526101306020908152604080832080546001600160a01b0319166001600160a01b0388161781556101318352818420825193840190925292825284929181906137839082614603565b5060408051602081019091526000815260018201906137a29082614603565b5060408051602081019091526000815260028201906137c19082614603565b5050506000908152610137602090815260408083204290819055610138835281842081905561013983528184205561014182528220805460018101825590835291200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b60975460ff166115af5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bdd565b60006001600160a01b0384163b1561396757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906138b5903390899088908890600401614cf5565b6020604051808303816000875af19250505080156138f0575060408051601f3d908101601f191682019092526138ed91810190614d28565b60015b61394d573d80801561391e576040519150601f19603f3d011682016040523d82523d6000602084013e613923565b606091505b5080516000036139455760405162461bcd60e51b8152600401610bdd90614ca3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061312f565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106139b15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106139dd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106139fb57662386f26fc10000830492506010015b6305f5e1008310613a13576305f5e100830492506008015b6127108310613a2757612710830492506004015b60648310613a39576064830492506002015b600a8310610b3e5760010192915050565b613a548383613a7d565b613a616000848484613871565b610eaa5760405162461bcd60e51b8152600401610bdd90614ca3565b6001600160a01b038216613ad35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bdd565b6000818152606760205260409020546001600160a01b031615613b385760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bdd565b613b466000838360016136ae565b6000818152606760205260409020546001600160a01b031615613bab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bdd565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461187b600083836001613736565b6001600160e01b03198116811461159c57600080fd5b600060208284031215613c4857600080fd5b813561146481613c20565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613c8357613c83613c53565b604051601f8501601f19908116603f01168101908282118183101715613cab57613cab613c53565b81604052809350858152868686011115613cc457600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613cef57600080fd5b61146483833560208501613c69565b63ffffffff8116811461159c57600080fd5b6001600160a01b038116811461159c57600080fd5b8035613d3081613d10565b919050565b60008060008060008060008060006101208a8c031215613d5457600080fd5b89356001600160401b0380821115613d6b57600080fd5b613d778d838e01613cde565b9a5060208c0135915080821115613d8d57600080fd5b50613d9a8c828d01613cde565b98505060408a0135965060608a0135613db281613cfe565b955060808a0135613dc281613cfe565b9450613dd060a08b01613d25565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60005b83811015613e10578181015183820152602001613df8565b50506000910152565b60008151808452613e31816020860160208601613df5565b601f01601f19169290920160200192915050565b6020815260006114646020830184613e19565b600060208284031215613e6a57600080fd5b5035919050565b60008060408385031215613e8457600080fd5b8235613e8f81613d10565b946020939093013593505050565b60008083601f840112613eaf57600080fd5b5081356001600160401b03811115613ec657600080fd5b602083019150836020828501011115613ede57600080fd5b9250929050565b60008060208385031215613ef857600080fd5b82356001600160401b03811115613f0e57600080fd5b613f1a85828601613e9d565b90969095509350505050565b600060208284031215613f3857600080fd5b813561146481613cfe565b600080600060608486031215613f5857600080fd5b8335613f6381613d10565b92506020840135613f7381613d10565b929592945050506040919091013590565b60008060008060808587031215613f9a57600080fd5b84356001600160401b0380821115613fb157600080fd5b613fbd88838901613cde565b95506020870135915080821115613fd357600080fd5b613fdf88838901613cde565b94506040870135915080821115613ff557600080fd5b61400188838901613cde565b9350606087013591508082111561401757600080fd5b5061402487828801613cde565b91505092959194509250565b60006020828403121561404257600080fd5b813561146481613d10565b803560038110613d3057600080fd5b6000806040838503121561406f57600080fd5b82356001600160401b0381111561408557600080fd5b61409185828601613cde565b9250506140a06020840161404d565b90509250929050565b600080604083850312156140bc57600080fd5b823591506140a06020840161404d565b600080604083850312156140df57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156141265783518352928401929184019160010161410a565b50909695505050505050565b6000806000806040858703121561414857600080fd5b84356001600160401b038082111561415f57600080fd5b61416b88838901613e9d565b9096509450602087013591508082111561418457600080fd5b5061419187828801613e9d565b95989497509550505050565b600080604083850312156141b057600080fd5b82356141bb81613d10565b9150602083013580151581146141d057600080fd5b809150509250929050565b600080604083850312156141ee57600080fd5b613e8f8361404d565b6000806000806080858703121561420d57600080fd5b843561421881613d10565b9350602085013561422881613d10565b92506040850135915060608501356001600160401b0381111561424a57600080fd5b8501601f8101871361425b57600080fd5b61402487823560208401613c69565b60006020828403121561427c57600080fd5b6114648261404d565b60008083601f84011261429757600080fd5b5081356001600160401b038111156142ae57600080fd5b6020830191508360208260051b8501011115613ede57600080fd5b600080600080604085870312156142df57600080fd5b84356001600160401b03808211156142f657600080fd5b61430288838901614285565b9096509450602087013591508082111561431b57600080fd5b5061419187828801614285565b6000806040838503121561433b57600080fd5b823561434681613d10565b915060208301356141d081613d10565b60018060a01b038716815263ffffffff8616602082015284604082015260c06060820152600061438960c0830186613e19565b828103608084015261439b8186613e19565b905082810360a08401526143af8185613e19565b9998505050505050505050565b600080600080600080600060a0888a0312156143d757600080fd5b87356001600160401b03808211156143ee57600080fd5b6143fa8b838c01613e9d565b909950975060208a013591508082111561441357600080fd5b61441f8b838c01613e9d565b909750955060408a013591508082111561443857600080fd5b6144448b838c01613cde565b945060608a013591508082111561445a57600080fd5b6144668b838c01613cde565b935060808a013591508082111561447c57600080fd5b506144898a828b01613cde565b91505092959891949750929550565b600181811c908216806144ac57607f821691505b6020821081036144cc57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526028908201527f443144433a20696e73756666696369656e7420706572736f6e616c20696e666f604082015267081c185e5b595b9d60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b3e57610b3e614577565b601f821115610eaa57600081815260208120601f850160051c810160208610156145c75750805b601f850160051c820191505b818110156145e6578281556001016145d3565b505050505050565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561461c5761461c613c53565b6146308161462a8454614498565b846145a0565b602080601f83116001811461465f576000841561464d5750858301515b61465785826145ee565b8655506145e6565b600085815260208120601f198616915b8281101561468e5788860151825594840194600190910190840161466f565b50858210156146ac5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526014908201527363616e6e6f7420726566756e642065786365737360601b604082015260600190565b63ffffffff81811683821601908082111561470757614707614577565b5092915050565b8082028115828204841417610b3e57610b3e614577565b634e487b7160e01b600052602160045260246000fd5b60006001820161474d5761474d614577565b5060010190565b60008261477157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527232b93937b91039b2b73234b7339032ba3432b960691b604082015260600190565b600082516147b5818460208701613df5565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600080855461481081614498565b8060408601526060600180841660008114614832576001811461484c5761487d565b60ff1985168884015283151560051b88018301955061487d565b8a60005260208060002060005b868110156148745781548b8201870152908401908201614859565b8a018501975050505b505050505082810360208401526148958185876147d5565b9695505050505050565b6001600160401b038311156148b6576148b6613c53565b6148ca836148c48354614498565b836145a0565b6000601f8411600181146148f857600085156148e65750838201355b6148f086826145ee565b84555061273e565b600083815260209020601f19861690835b828110156149295786850135825560209485019460019092019101614909565b50868210156149465760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000835161496a818460208801613df5565b83519083019061497e818360208801613df5565b01949350505050565b6000808335601e1984360301811261499e57600080fd5b8301803591506001600160401b038211156149b857600080fd5b602001915036819003821315613ede57600080fd5b6000823560be198336030181126147b557600080fd5b81356149ee81613d10565b81546001600160a01b031981166001600160a01b039290921691821783556020840135614a1a81613cfe565b6001600160c01b03199190911690911760a09190911b63ffffffff60a01b1617815560408201356001820155614a536060830183614987565b614a6181836002860161489f565b5050614a706080830183614987565b614a7e81836003860161489f565b5050614a8d60a0830183614987565b61135381836004860161489f565b80820180821115610b3e57610b3e614577565b818103614ab9575050565b614ac38254614498565b6001600160401b03811115614ada57614ada613c53565b614ae88161462a8454614498565b6000601f821160018114614b165760008315614b045750848201545b614b0e84826145ee565b85555061273e565b600085815260209020601f19841690600086815260209020845b83811015614b505782860154825560019586019590910190602001614b30565b50858310156146ac5793015460001960f8600387901b161c19169092555050600190811b01905550565b6000808354614b8881614498565b60018281168015614ba05760018114614bb557614be4565b60ff1984168752821515830287019450614be4565b8760005260208060002060005b85811015614bdb5781548a820152908401908201614bc2565b50505082870194505b50929695505050505050565b838152604060208201526000614c0a6040830184866147d5565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061489590830184613e19565b600060208284031215614d3a57600080fd5b815161146481613c2056fea264697066735822122060c19ab4a24e01c8f49df995cb38744ca6d221bcbce43d02cd84743b71e736a464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103975760003560e01c80637528b89c116101dc578063b88d4fde11610102578063dbafb570116100a0578063f2fde38b1161006f578063f2fde38b14610a84578063f5dc7d5614610aa4578063f623b7af14610acc578063fcb11ff614610adf57600080fd5b8063dbafb570146109c9578063e8bdcc09146109e9578063e985e9c514610a09578063eb75204214610a5257600080fd5b8063c87b56dd116100dc578063c87b56dd1461094c578063d22da0751461096c578063d3a3270c14610983578063d50cb88b146109a357600080fd5b8063b88d4fde146108de578063c218c591146108fe578063c22a31011461091e57600080fd5b80638c4b84751161017a578063a22cb46511610149578063a22cb46514610873578063afff5a6414610893578063b5d1990d146108a8578063b7b9d696146108be57600080fd5b80638c4b8475146107fa5780638da5cb5b1461082d57806395d89b411461084b578063a1a0c1bc1461086057600080fd5b80638456cb59116101b65780638456cb591461078e5780638789fcc1146107a35780638a5cab27146107ba5780638ab01168146107da57600080fd5b80637528b89c146107335780637e1afcb51461074e578063839e5f781461077b57600080fd5b80633ccfd60b116102c157806361921a2a1161025f5780636c863bc21161022e5780636c863bc2146106cb57806370a08231146106eb578063715018a61461070b57806374edae171461072057600080fd5b806361921a2a1461063b5780636352211e14610652578063649cde291461067257806368b2210d146106ab57600080fd5b806348ff2e7c1161029b57806348ff2e7c146105db5780634e84bd4a146105fb5780635b8e99dc146106105780635c975abb1461062357600080fd5b80633ccfd60b146105915780633f4ba83a146105a657806342842e0e146105bb57600080fd5b80630f75e5c01161033957806323b872dd1161030857806323b872dd1461051e5780632745edba1461053e57806330027f3b1461055157806331d98b3f1461057157600080fd5b80630f75e5c0146104bb5780630f77bcfb146104d2578063159171dd146104e95780632143f93b1461050957600080fd5b8063081812fc11610375578063081812fc14610415578063095ea7b31461044d5780630b3a8d951461046d5780630cb6aaf11461048d57600080fd5b806301ffc9a71461039c57806306b0c389146103d157806306fdde03146103f3575b600080fd5b3480156103a857600080fd5b506103bc6103b7366004613c36565b610af2565b60405190151581526020015b60405180910390f35b3480156103dd57600080fd5b506103f16103ec366004613d35565b610b44565b005b3480156103ff57600080fd5b50610408610ce1565b6040516103c89190613e45565b34801561042157600080fd5b50610435610430366004613e58565b610d73565b6040516001600160a01b0390911681526020016103c8565b34801561045957600080fd5b506103f1610468366004613e71565b610d9a565b34801561047957600080fd5b50610408610488366004613ee5565b610eaf565b34801561049957600080fd5b506104ad6104a8366004613e58565b611049565b6040519081526020016103c8565b3480156104c757600080fd5b506104ad61012e5481565b3480156104de57600080fd5b506104ad6101405481565b3480156104f557600080fd5b506103f1610504366004613f26565b61106b565b34801561051557600080fd5b50610408611090565b34801561052a57600080fd5b506103f1610539366004613f43565b61111f565b6103f161054c366004613f84565b611150565b34801561055d57600080fd5b506103f161056c366004614030565b611359565b34801561057d57600080fd5b506104ad61058c366004613e58565b6113dd565b34801561059d57600080fd5b506103f161146b565b3480156105b257600080fd5b506103f161159f565b3480156105c757600080fd5b506103f16105d6366004613f43565b6115b1565b3480156105e757600080fd5b506103f16105f6366004613e58565b6115cc565b34801561060757600080fd5b506103f16115da565b6103f161061e36600461405c565b6115f2565b34801561062f57600080fd5b5060975460ff166103bc565b34801561064757600080fd5b506104ad61013f5481565b34801561065e57600080fd5b5061043561066d366004613e58565b61187f565b34801561067e57600080fd5b506104ad61068d3660046140a9565b61013360209081526000928352604080842090915290825290205481565b3480156106b757600080fd5b506104086106c6366004613ee5565b6118df565b3480156106d757600080fd5b506104086106e6366004613ee5565b6119f0565b3480156106f757600080fd5b506104ad610706366004614030565b611b01565b34801561071757600080fd5b506103f1611b87565b6103f161072e366004613ee5565b611b99565b34801561073f57600080fd5b5061012d546103bc9060ff1681565b34801561075a57600080fd5b5061076e6107693660046140cc565b611e48565b6040516103c891906140ee565b6103f1610789366004614132565b611f5f565b34801561079a57600080fd5b506103f1612174565b3480156107af57600080fd5b506104ad61013e5481565b3480156107c657600080fd5b506103f16107d5366004613e58565b612184565b3480156107e657600080fd5b506103f16107f5366004613f26565b612192565b34801561080657600080fd5b5061012f546108189063ffffffff1681565b60405163ffffffff90911681526020016103c8565b34801561083957600080fd5b5060c9546001600160a01b0316610435565b34801561085757600080fd5b506104086121c3565b6103f161086e366004613ee5565b6121d2565b34801561087f57600080fd5b506103f161088e36600461419d565b61231d565b34801561089f57600080fd5b50610408612328565b3480156108b457600080fd5b5061013c546104ad565b3480156108ca57600080fd5b506103f16108d93660046141db565b612336565b3480156108ea57600080fd5b506103f16108f93660046141f7565b61237c565b34801561090a57600080fd5b506103f1610919366004613e58565b6123ae565b34801561092a57600080fd5b506104ad61093936600461426a565b6101326020526000908152604090205481565b34801561095857600080fd5b50610408610967366004613e58565b6123bc565b34801561097857600080fd5b506104ad61013d5481565b34801561098f57600080fd5b5061043561099e3660046140cc565b61242f565b3480156109af57600080fd5b5061012f5461081890640100000000900463ffffffff1681565b3480156109d557600080fd5b506103f16109e4366004613e58565b612468565b3480156109f557600080fd5b506103f1610a043660046142c9565b612476565b348015610a1557600080fd5b506103bc610a24366004614328565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610a5e57600080fd5b50610a72610a6d366004613e58565b612745565b6040516103c896959493929190614356565b348015610a9057600080fd5b506103f1610a9f366004614030565b612925565b348015610ab057600080fd5b5061012f5461043590600160401b90046001600160a01b031681565b6103f1610ada3660046143bc565b61299b565b6103f1610aed366004613ee5565b612d7c565b60006001600160e01b031982166380ac58cd60e01b1480610b2357506001600160e01b03198216635b5e139f60e01b145b80610b3e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff1615808015610b645750600054600160ff909116105b80610b7e5750303b158015610b7e575060005460ff166001145b610be65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610c09576000805461ff0019166101001790555b610c138a8a612ed3565b610c1b612f04565b610c23612f33565b610c2b612f62565b61012e88905561012f80546001600160a01b038716600160401b02600160401b600160e01b031963ffffffff8a81166401000000000267ffffffffffffffff19909416908c1617929092179190911617905561013e84905561013f8390556101408290558015610cd5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b606060658054610cf090614498565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1c90614498565b8015610d695780601f10610d3e57610100808354040283529160200191610d69565b820191906000526020600020905b815481529060010190602001808311610d4c57829003601f168201915b5050505050905090565b6000610d7e82612f91565b506000908152606960205260409020546001600160a01b031690565b6000610da58261187f565b9050806001600160a01b0316836001600160a01b031603610e125760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bdd565b336001600160a01b0382161480610e2e5750610e2e8133610a24565b610ea05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bdd565b610eaa8383612ff0565b505050565b6060600061013060008585604051610ec89291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b0316905060008484604051610f099291906144d2565b6040519081900390209050336001600160a01b03831614610fa757336000908152610134602090815260408083208484528252808320546101379092529091205410610fa75760405162461bcd60e51b815260206004820152602760248201527f443144433a206e6f207065726d697373696f6e20666f722074656c656772616d604482015266081c995d99585b60ca1b6064820152608401610bdd565b6000818152610131602052604090208054610fc190614498565b80601f0160208091040260200160405190810160405280929190818152602001828054610fed90614498565b801561103a5780601f1061100f5761010080835404028352916020019161103a565b820191906000526020600020905b81548152906001019060200180831161101d57829003601f168201915b50505050509250505092915050565b61013c818154811061105a57600080fd5b600091825260209091200154905081565b61107361305e565b61012f805463ffffffff191663ffffffff92909216919091179055565b61013a805461109e90614498565b80601f01602080910402602001604051908101604052809291908181526020018280546110ca90614498565b80156111175780601f106110ec57610100808354040283529160200191611117565b820191906000526020600020905b8154815290600101906020018083116110fa57829003601f168201915b505050505081565b61112933826130b8565b6111455760405162461bcd60e51b8152600401610bdd906144e2565b610eaa838383613137565b6111586132b0565b611160613309565b8351602085012083513490156111dd578061013e5411156111935760405162461bcd60e51b8152600401610bdd9061452f565b61013e546111a1908261458d565b6000838152610131602052604090209091506111bd8682614603565b503360009081526101346020908152604080832085845290915290204290555b835115611254578061013f5411156112075760405162461bcd60e51b8152600401610bdd9061452f565b61013f54611215908261458d565b6000838152610131602052604090209091506001016112348582614603565b503360009081526101356020908152604080832085845290915290204290555b8251156112cb578061014054111561127e5760405162461bcd60e51b8152600401610bdd9061452f565b61013f5461128c908261458d565b6000838152610131602052604090209091506001016112ab8582614603565b503360009081526101366020908152604080832085845290915290204290555b8015611347576000336001600160a01b0316826040515b60006040518083038185875af1925050503d806000811461131f576040519150601f19603f3d011682016040523d82523d6000602084013e611324565b606091505b50509050806113455760405162461bcd60e51b8152600401610bdd906146bc565b505b5050611353600160fb55565b50505050565b61136161305e565b61012f54604080516001600160a01b03600160401b9093048316815291831660208301527fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec7307910160405180910390a161012f80546001600160a01b03909216600160401b02600160401b600160e01b0319909216919091179055565b60008181526101306020526040812061012f54815463ffffffff428116926114119290821691600160a01b909104166146ea565b63ffffffff161161142757505061012e54919050565b80546001600160a01b0316331461145e5761012f54600182015461145991640100000000900463ffffffff169061470e565b611464565b80600101545b9392505050565b60c9546001600160a01b0316331480611496575061012f54600160401b90046001600160a01b031633145b6114f15760405162461bcd60e51b815260206004820152602660248201527f443144433a206d757374206265206f776e6572206f7220726576656e7565206160448201526518d8dbdd5b9d60d21b6064820152608401610bdd565b61012f54604051600091600160401b90046001600160a01b03169047908381818185875af1925050503d8060008114611546576040519150601f19603f3d011682016040523d82523d6000602084013e61154b565b606091505b505090508061159c5760405162461bcd60e51b815260206004820152601860248201527f443144433a206661696c656420746f20776974686472617700000000000000006044820152606401610bdd565b50565b6115a761305e565b6115af613356565b565b610eaa8383836040518060200160405280600081525061237c565b6115d461305e565b61013f55565b6115e261305e565b61012d805460ff19166001179055565b6115fa6132b0565b611602613309565b610133600083805190602001208152602001908152602001600020600082600281111561163157611631614725565b600281111561164257611642614725565b81526020019081526020016000206000815461165d9061473b565b9091555060006101328183600281111561167957611679614725565b600281111561168a5761168a614725565b8152602001908152602001600020549050348111156116eb5760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e7420656d6f6a69207061796d656e746044820152606401610bdd565b8251602080850191909120600090815261013090915260408120546001600160a01b031690606461171d84605a61470e565b6117279190614754565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611776576040519150601f19603f3d011682016040523d82523d6000602084013e61177b565b606091505b505090508061179c5760405162461bcd60e51b8152600401610bdd90614776565b60006117a8853461458d565b9050801561181a57604051600090339083908381818185875af1925050503d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50509050806118185760405162461bcd60e51b8152600401610bdd906146bc565b505b85600281111561182c5761182c614725565b8760405161183a91906147a3565b6040519081900381209033907f852605dcec8d6bf5f3c46c20fe8e730e7096150f02450555fed4aa4298158bae90600090a4505050505061187b600160fb55565b5050565b6000818152606760205260408120546001600160a01b031680610b3e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bdd565b60606000610130600085856040516118f89291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600084846040516119399291906144d2565b6040519081900390209050336001600160a01b038316146119d3573360009081526101356020908152604080832084845282528083205461013890925290912054106119d35760405162461bcd60e51b8152602060048201526024808201527f443144433a206e6f207065726d697373696f6e20666f7220656d61696c2072656044820152631d99585b60e21b6064820152608401610bdd565b6000818152610131602052604090206001018054610fc190614498565b6060600061013060008585604051611a099291906144d2565b6040518091039020815260200190815260200160002060000160009054906101000a90046001600160a01b0316905060008484604051611a4a9291906144d2565b6040519081900390209050336001600160a01b03831614611ae457336000908152610136602090815260408083208484528252808320546101399092529091205410611ae45760405162461bcd60e51b8152602060048201526024808201527f443144433a206e6f207065726d697373696f6e20666f722070686f6e652072656044820152631d99585b60e21b6064820152608401610bdd565b6000818152610131602052604090206002018054610fc190614498565b60006001600160a01b038216611b6b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610bdd565b506001600160a01b031660009081526068602052604090205490565b611b8f61305e565b6115af60006133a8565b611ba16132b0565b611ba9613309565b6101405434811115611bfd5760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e742070686f6e65207061796d656e746044820152606401610bdd565b60008383604051611c0f9291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b0316338103611c855760405162461bcd60e51b815260206004820152601b60248201527f443144433a2073656c662072657665616c20666f722070686f6e6500000000006044820152606401610bdd565b6000828152610139602090815260408083205433845261013683528184208685529092529091205411611dc85733600090815261013660209081526040808320858452909152808220429055516001600160a01b0383169085905b60006040518083038185875af1925050503d8060008114611d1d576040519150601f19603f3d011682016040523d82523d6000602084013e611d22565b606091505b5050905080611d435760405162461bcd60e51b8152600401610bdd90614776565b6000611d4f853461458d565b90508015611dc157604051600090339083908381818185875af1925050503d8060008114611d99576040519150601f19603f3d011682016040523d82523d6000602084013e611d9e565b606091505b5050905080611dbf5760405162461bcd60e51b8152600401610bdd906146bc565b505b5050611e3b565b348015611e3957604051600090339083908381818185875af1925050503d8060008114611e11576040519150601f19603f3d011682016040523d82523d6000602084013e611e16565b606091505b5050905080611e375760405162461bcd60e51b8152600401610bdd906146bc565b505b505b50505061187b600160fb55565b6060828211611ea55760405162461bcd60e51b8152602060048201526024808201527f443144433a20656e64206d7573742062652067726561746572207468616e20736044820152631d185c9d60e21b6064820152608401610bdd565b6000611eb1848461458d565b6001600160401b03811115611ec857611ec8613c53565b604051908082528060200260200182016040528015611ef1578160200160208202803683370190505b509050835b83811015611f575761013c8181548110611f1257611f126147bf565b9060005260206000200154828683611f2a919061458d565b81518110611f3a57611f3a6147bf565b602090810291909101015280611f4f8161473b565b915050611ef6565b509392505050565b611f676132b0565b611f6f613309565b336001600160a01b031661013060008686604051611f8e9291906144d2565b60408051918290039091208252602082019290925201600020546001600160a01b031614611ff05760405162461bcd60e51b815260206004820152600f60248201526e2218a2219d103737ba1037bbb732b960891b6044820152606401610bdd565b6104008111156120375760405162461bcd60e51b8152602060048201526012602482015271443144433a2075726c20746f6f206c6f6e6760701b6044820152606401610bdd565b604051339061204990869086906144d2565b60405180910390207f096f0aee78aea5199be1c1bf75f83f8c98e7002651030cbe56c0ca959cdd24c5610130600088886040516120879291906144d2565b6040518091039020815260200190815260200160002060020185856040516120b1939291906147fe565b60405180910390a38181610130600087876040516120d09291906144d2565b6040518091039020815260200190815260200160002060020191826120f692919061489f565b5061013d543481111561214b5760405162461bcd60e51b815260206004820152601e60248201527f443144433a20696e73756666696369656e742075726c207061796d656e7400006044820152606401610bdd565b6000612157823461458d565b90508015611347576000336001600160a01b0316826040516112e2565b61217c61305e565b6115af6133fa565b61218c61305e565b61014055565b61219a61305e565b61012f805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b606060668054610cf090614498565b6121da6132b0565b6121e2613309565b61013f54348111156122365760405162461bcd60e51b815260206004820181905260248201527f443144433a20696e73756666696369656e7420656d61696c207061796d656e746044820152606401610bdd565b600083836040516122489291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b03163381036122be5760405162461bcd60e51b815260206004820152601b60248201527f443144433a2073656c662072657665616c20666f7220656d61696c00000000006044820152606401610bdd565b6000828152610138602090815260408083205433845261013583528184208685529092529091205411611dc85733600090815261013560209081526040808320858452909152808220429055516001600160a01b038316908590611ce0565b61187b338383613437565b61013b805461109e90614498565b61233e61305e565b80610132600084600281111561235657612356614725565b600281111561236757612367614725565b81526020810191909152604001600020555050565b61238633836130b8565b6123a25760405162461bcd60e51b8152600401610bdd906144e2565b61135384848484613505565b6123b661305e565b61013e55565b60606123c782612f91565b60006123de60408051602081019091526000815290565b905060008151116123fe5760405180602001604052806000815250611464565b8061240884613538565b604051602001612419929190614958565b6040516020818303038152906040529392505050565b610141602052816000526040600020818154811061244c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b61247061305e565b61012e55565b61247e61305e565b61012d5460ff16156124d25760405162461bcd60e51b815260206004820152601960248201527f443144433a20616c726561647920696e697469616c697a6564000000000000006044820152606401610bdd565b8281146125185760405162461bcd60e51b81526020600482015260146024820152730886288867440eadccae2eac2d840d8cadccee8d60631b6044820152606401610bdd565b60005b818110156126f0576000858583818110612537576125376147bf565b90506020028101906125499190614987565b6040516125579291906144d2565b60405180910390209050838383818110612573576125736147bf565b905060200281019061258591906149cd565b60008281526101306020526040902061259e82826149e3565b505061013c8054600181810183556000929092527fa55c1639d917d7b7cbf3837f1642937d4507076edbe26b1a6008234bb0c49530018290558210801590612602575060008181526101306020526040902060030180546125fe90614498565b1590505b1561265557858561261460018561458d565b818110612623576126236147bf565b90506020028101906126359190614987565b6000838152610130602052604090206003019161265391908361489f565b505b61266060018461458d565b8210801561268a5750600081815261013060205260409020600401805461268690614498565b1590505b156126dd57858561269c846001614a9b565b8181106126ab576126ab6147bf565b90506020028101906126bd9190614987565b600083815261013060205260409020600401916126db91908361489f565b505b50806126e88161473b565b91505061251b565b5083836126fe60018261458d565b81811061270d5761270d6147bf565b905060200281019061271f9190614987565b61013b9161272e91908361489f565b5061013a61273e61013b82614aae565b5050505050565b610130602052600090815260409020805460018201546002830180546001600160a01b03841694600160a01b90940463ffffffff1693919061278690614498565b80601f01602080910402602001604051908101604052809291908181526020018280546127b290614498565b80156127ff5780601f106127d4576101008083540402835291602001916127ff565b820191906000526020600020905b8154815290600101906020018083116127e257829003601f168201915b50505050509080600301805461281490614498565b80601f016020809104026020016040519081016040528092919081815260200182805461284090614498565b801561288d5780601f106128625761010080835404028352916020019161288d565b820191906000526020600020905b81548152906001019060200180831161287057829003601f168201915b5050505050908060040180546128a290614498565b80601f01602080910402602001604051908101604052809291908181526020018280546128ce90614498565b801561291b5780601f106128f05761010080835404028352916020019161291b565b820191906000526020600020905b8154815290600101906020018083116128fe57829003601f168201915b5050505050905086565b61292d61305e565b6001600160a01b0381166129925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bdd565b61159c816133a8565b6129a36132b0565b6129ab613309565b60808611156129f25760405162461bcd60e51b8152602060048201526013602482015272443144433a206e616d6520746f6f206c6f6e6760681b6044820152606401610bdd565b610400841115612a395760405162461bcd60e51b8152602060048201526012602482015271443144433a2075726c20746f6f206c6f6e6760701b6044820152606401610bdd565b60008787604051612a4b9291906144d2565b6040805191829003909120600081815261013060205291822090925090612a71836113dd565b905034811115612ac35760405162461bcd60e51b815260206004820152601a60248201527f443144433a20696e73756666696369656e74207061796d656e740000000000006044820152606401610bdd565b81546001830182905563ffffffff4216600160a01b0263ffffffff60a01b1933166001600160c01b03198316171783556001600160a01b03168715612b135760028301612b11898b8361489f565b505b61013a612b218b8d8361489f565b506000848152606760205260409020546001600160a01b031615612bef57612b5a81338660405180602001604052806000815250613505565b60006064612b6984605a61470e565b612b739190614754565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612bc2576040519150601f19603f3d011682016040523d82523d6000602084013e612bc7565b606091505b5050905080612be85760405162461bcd60e51b8152600401610bdd90614776565b5050612c57565b8a8a610130600061013b604051612c069190614b7a565b604051809103902081526020019081526020016000206004019182612c2c92919061489f565b5060038301612c3d61013b82614aae565b5061013b612c4c8b8d8361489f565b50612c5733856135ca565b60008481526101316020526040902080612c718982614603565b5060018101612c808882614603565b5060028101612c8f8782614603565b506000612c9c843461458d565b90508015612d0e57604051600090339083908381818185875af1925050503d8060008114612ce6576040519150601f19603f3d011682016040523d82523d6000602084013e612ceb565b606091505b5050905080612d0c5760405162461bcd60e51b8152600401610bdd906146bc565b505b6040513390612d20908f908f906144d2565b60405180910390207ff1d86ac814e2a6b7710c558956057aa8ca4d67a2b19ea13b9dc84c92945c9896868e8e604051612d5b93929190614bf0565b60405180910390a3505050505050612d73600160fb55565b50505050505050565b612d846132b0565b612d8c613309565b61013e5434811115612dec5760405162461bcd60e51b815260206004820152602360248201527f443144433a20696e73756666696369656e742074656c656772616d207061796d604482015262195b9d60ea1b6064820152608401610bdd565b60008383604051612dfe9291906144d2565b6040805191829003909120600081815261013060205291909120549091506001600160a01b0316338103612e745760405162461bcd60e51b815260206004820152601e60248201527f443144433a2073656c662072657665616c20666f722074656c656772616d00006044820152606401610bdd565b6000828152610137602090815260408083205433845261013483528184208685529092529091205411611dc85733600090815261013460209081526040808320858452909152808220429055516001600160a01b038316908590611ce0565b600054610100900460ff16612efa5760405162461bcd60e51b8152600401610bdd90614c13565b61187b82826135e4565b600054610100900460ff16612f2b5760405162461bcd60e51b8152600401610bdd90614c13565b6115af613624565b600054610100900460ff16612f5a5760405162461bcd60e51b8152600401610bdd90614c13565b6115af613657565b600054610100900460ff16612f895760405162461bcd60e51b8152600401610bdd90614c13565b6115af613687565b6000818152606760205260409020546001600160a01b031661159c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bdd565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906130258261187f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c9546001600160a01b031633146115af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bdd565b6000806130c48361187f565b9050806001600160a01b0316846001600160a01b0316148061310b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061312f5750836001600160a01b031661312484610d73565b6001600160a01b0316145b949350505050565b826001600160a01b031661314a8261187f565b6001600160a01b0316146131705760405162461bcd60e51b8152600401610bdd90614c5e565b6001600160a01b0382166131d25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bdd565b6131df83838360016136ae565b826001600160a01b03166131f28261187f565b6001600160a01b0316146132185760405162461bcd60e51b8152600401610bdd90614c5e565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610eaa8383836001613736565b600260fb54036133025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bdd565b600260fb55565b60975460ff16156115af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610bdd565b600160fb55565b61335e613828565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613402613309565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861338b3390565b816001600160a01b0316836001600160a01b0316036134985760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bdd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613510848484613137565b61351c84848484613871565b6113535760405162461bcd60e51b8152600401610bdd90614ca3565b6060600061354583613972565b60010190506000816001600160401b0381111561356457613564613c53565b6040519080825280601f01601f19166020018201604052801561358e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461359857509392505050565b61187b828260405180602001604052806000815250613a4a565b600054610100900460ff1661360b5760405162461bcd60e51b8152600401610bdd90614c13565b60656136178382614603565b506066610eaa8282614603565b600054610100900460ff1661364b5760405162461bcd60e51b8152600401610bdd90614c13565b6097805460ff19169055565b600054610100900460ff1661367e5760405162461bcd60e51b8152600401610bdd90614c13565b6115af336133a8565b600054610100900460ff1661334f5760405162461bcd60e51b8152600401610bdd90614c13565b6001811115611353576001600160a01b038416156136f4576001600160a01b038416600090815260686020526040812080548392906136ee90849061458d565b90915550505b6001600160a01b03831615611353576001600160a01b0383166000908152606860205260408120805483929061372b908490614a9b565b909155505050505050565b60008281526101306020908152604080832080546001600160a01b0319166001600160a01b0388161781556101318352818420825193840190925292825284929181906137839082614603565b5060408051602081019091526000815260018201906137a29082614603565b5060408051602081019091526000815260028201906137c19082614603565b5050506000908152610137602090815260408083204290819055610138835281842081905561013983528184205561014182528220805460018101825590835291200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b60975460ff166115af5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bdd565b60006001600160a01b0384163b1561396757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906138b5903390899088908890600401614cf5565b6020604051808303816000875af19250505080156138f0575060408051601f3d908101601f191682019092526138ed91810190614d28565b60015b61394d573d80801561391e576040519150601f19603f3d011682016040523d82523d6000602084013e613923565b606091505b5080516000036139455760405162461bcd60e51b8152600401610bdd90614ca3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061312f565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106139b15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106139dd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106139fb57662386f26fc10000830492506010015b6305f5e1008310613a13576305f5e100830492506008015b6127108310613a2757612710830492506004015b60648310613a39576064830492506002015b600a8310610b3e5760010192915050565b613a548383613a7d565b613a616000848484613871565b610eaa5760405162461bcd60e51b8152600401610bdd90614ca3565b6001600160a01b038216613ad35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bdd565b6000818152606760205260409020546001600160a01b031615613b385760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bdd565b613b466000838360016136ae565b6000818152606760205260409020546001600160a01b031615613bab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bdd565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461187b600083836001613736565b6001600160e01b03198116811461159c57600080fd5b600060208284031215613c4857600080fd5b813561146481613c20565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613c8357613c83613c53565b604051601f8501601f19908116603f01168101908282118183101715613cab57613cab613c53565b81604052809350858152868686011115613cc457600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613cef57600080fd5b61146483833560208501613c69565b63ffffffff8116811461159c57600080fd5b6001600160a01b038116811461159c57600080fd5b8035613d3081613d10565b919050565b60008060008060008060008060006101208a8c031215613d5457600080fd5b89356001600160401b0380821115613d6b57600080fd5b613d778d838e01613cde565b9a5060208c0135915080821115613d8d57600080fd5b50613d9a8c828d01613cde565b98505060408a0135965060608a0135613db281613cfe565b955060808a0135613dc281613cfe565b9450613dd060a08b01613d25565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60005b83811015613e10578181015183820152602001613df8565b50506000910152565b60008151808452613e31816020860160208601613df5565b601f01601f19169290920160200192915050565b6020815260006114646020830184613e19565b600060208284031215613e6a57600080fd5b5035919050565b60008060408385031215613e8457600080fd5b8235613e8f81613d10565b946020939093013593505050565b60008083601f840112613eaf57600080fd5b5081356001600160401b03811115613ec657600080fd5b602083019150836020828501011115613ede57600080fd5b9250929050565b60008060208385031215613ef857600080fd5b82356001600160401b03811115613f0e57600080fd5b613f1a85828601613e9d565b90969095509350505050565b600060208284031215613f3857600080fd5b813561146481613cfe565b600080600060608486031215613f5857600080fd5b8335613f6381613d10565b92506020840135613f7381613d10565b929592945050506040919091013590565b60008060008060808587031215613f9a57600080fd5b84356001600160401b0380821115613fb157600080fd5b613fbd88838901613cde565b95506020870135915080821115613fd357600080fd5b613fdf88838901613cde565b94506040870135915080821115613ff557600080fd5b61400188838901613cde565b9350606087013591508082111561401757600080fd5b5061402487828801613cde565b91505092959194509250565b60006020828403121561404257600080fd5b813561146481613d10565b803560038110613d3057600080fd5b6000806040838503121561406f57600080fd5b82356001600160401b0381111561408557600080fd5b61409185828601613cde565b9250506140a06020840161404d565b90509250929050565b600080604083850312156140bc57600080fd5b823591506140a06020840161404d565b600080604083850312156140df57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156141265783518352928401929184019160010161410a565b50909695505050505050565b6000806000806040858703121561414857600080fd5b84356001600160401b038082111561415f57600080fd5b61416b88838901613e9d565b9096509450602087013591508082111561418457600080fd5b5061419187828801613e9d565b95989497509550505050565b600080604083850312156141b057600080fd5b82356141bb81613d10565b9150602083013580151581146141d057600080fd5b809150509250929050565b600080604083850312156141ee57600080fd5b613e8f8361404d565b6000806000806080858703121561420d57600080fd5b843561421881613d10565b9350602085013561422881613d10565b92506040850135915060608501356001600160401b0381111561424a57600080fd5b8501601f8101871361425b57600080fd5b61402487823560208401613c69565b60006020828403121561427c57600080fd5b6114648261404d565b60008083601f84011261429757600080fd5b5081356001600160401b038111156142ae57600080fd5b6020830191508360208260051b8501011115613ede57600080fd5b600080600080604085870312156142df57600080fd5b84356001600160401b03808211156142f657600080fd5b61430288838901614285565b9096509450602087013591508082111561431b57600080fd5b5061419187828801614285565b6000806040838503121561433b57600080fd5b823561434681613d10565b915060208301356141d081613d10565b60018060a01b038716815263ffffffff8616602082015284604082015260c06060820152600061438960c0830186613e19565b828103608084015261439b8186613e19565b905082810360a08401526143af8185613e19565b9998505050505050505050565b600080600080600080600060a0888a0312156143d757600080fd5b87356001600160401b03808211156143ee57600080fd5b6143fa8b838c01613e9d565b909950975060208a013591508082111561441357600080fd5b61441f8b838c01613e9d565b909750955060408a013591508082111561443857600080fd5b6144448b838c01613cde565b945060608a013591508082111561445a57600080fd5b6144668b838c01613cde565b935060808a013591508082111561447c57600080fd5b506144898a828b01613cde565b91505092959891949750929550565b600181811c908216806144ac57607f821691505b6020821081036144cc57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526028908201527f443144433a20696e73756666696369656e7420706572736f6e616c20696e666f604082015267081c185e5b595b9d60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b3e57610b3e614577565b601f821115610eaa57600081815260208120601f850160051c810160208610156145c75750805b601f850160051c820191505b818110156145e6578281556001016145d3565b505050505050565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561461c5761461c613c53565b6146308161462a8454614498565b846145a0565b602080601f83116001811461465f576000841561464d5750858301515b61465785826145ee565b8655506145e6565b600085815260208120601f198616915b8281101561468e5788860151825594840194600190910190840161466f565b50858210156146ac5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526014908201527363616e6e6f7420726566756e642065786365737360601b604082015260600190565b63ffffffff81811683821601908082111561470757614707614577565b5092915050565b8082028115828204841417610b3e57610b3e614577565b634e487b7160e01b600052602160045260246000fd5b60006001820161474d5761474d614577565b5060010190565b60008261477157634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527232b93937b91039b2b73234b7339032ba3432b960691b604082015260600190565b600082516147b5818460208701613df5565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600080855461481081614498565b8060408601526060600180841660008114614832576001811461484c5761487d565b60ff1985168884015283151560051b88018301955061487d565b8a60005260208060002060005b868110156148745781548b8201870152908401908201614859565b8a018501975050505b505050505082810360208401526148958185876147d5565b9695505050505050565b6001600160401b038311156148b6576148b6613c53565b6148ca836148c48354614498565b836145a0565b6000601f8411600181146148f857600085156148e65750838201355b6148f086826145ee565b84555061273e565b600083815260209020601f19861690835b828110156149295786850135825560209485019460019092019101614909565b50868210156149465760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000835161496a818460208801613df5565b83519083019061497e818360208801613df5565b01949350505050565b6000808335601e1984360301811261499e57600080fd5b8301803591506001600160401b038211156149b857600080fd5b602001915036819003821315613ede57600080fd5b6000823560be198336030181126147b557600080fd5b81356149ee81613d10565b81546001600160a01b031981166001600160a01b039290921691821783556020840135614a1a81613cfe565b6001600160c01b03199190911690911760a09190911b63ffffffff60a01b1617815560408201356001820155614a536060830183614987565b614a6181836002860161489f565b5050614a706080830183614987565b614a7e81836003860161489f565b5050614a8d60a0830183614987565b61135381836004860161489f565b80820180821115610b3e57610b3e614577565b818103614ab9575050565b614ac38254614498565b6001600160401b03811115614ada57614ada613c53565b614ae88161462a8454614498565b6000601f821160018114614b165760008315614b045750848201545b614b0e84826145ee565b85555061273e565b600085815260209020601f19841690600086815260209020845b83811015614b505782860154825560019586019590910190602001614b30565b50858310156146ac5793015460001960f8600387901b161c19169092555050600190811b01905550565b6000808354614b8881614498565b60018281168015614ba05760018114614bb557614be4565b60ff1984168752821515830287019450614be4565b8760005260208060002060005b85811015614bdb5781548a820152908401908201614bc2565b50505082870194505b50929695505050505050565b838152604060208201526000614c0a6040830184866147d5565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061489590830184613e19565b600060208284031215614d3a57600080fd5b815161146481613c2056fea264697066735822122060c19ab4a24e01c8f49df995cb38744ca6d221bcbce43d02cd84743b71e736a464736f6c63430008110033",
  "devdoc": {
    "author": "John Whitton (github.com/johnwhitton), reviewed and revised by Aaron Li (github.com/polymorpher)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_emailRevealAt": {
        "details": "User -> Name -> Timestamp got the reval permission"
      },
      "_emailUpdateAt": {
        "details": "TokenId -> Timestamp the email info was updated"
      },
      "_ownerInfos": {
        "details": "TokenId -> OwnerInfo"
      },
      "_phoneRevealAt": {
        "details": "User -> Name -> Timestamp got the reval permission"
      },
      "_phoneUpdateAt": {
        "details": "TokenId -> Timestamp the phone info was updated"
      },
      "_telegramRevealAt": {
        "details": "User -> Name -> Timestamp got the reval permission"
      },
      "_telegramUpdateAt": {
        "details": "TokenId -> Timestamp the telegram info was updated"
      },
      "emailRevealPrice": {
        "details": "Price for the email reveal"
      },
      "emojiReactionCounters": {
        "details": "TokenId -> Emoji Type -> Counter"
      },
      "emojiReactionPrices": {
        "details": "Emoji Type -> Price"
      },
      "keys": {
        "details": "TokenId list"
      },
      "lastCreated": {
        "details": "Name created lastly"
      },
      "lastRented": {
        "details": "Name rented lastly"
      },
      "nameRecords": {
        "details": "TokenId -> NameRecord"
      },
      "ownersOfName": {
        "details": "TokenId -> Owner list"
      },
      "phoneRevealPrice": {
        "details": "Price for the phone reveal"
      },
      "telegramRevealPrice": {
        "details": "Price for the telegram reveal"
      },
      "urlUpdatePrice": {
        "details": "Price for the url update"
      }
    },
    "title": "A subdomain manager contract for .1.country (D1DC - Dot 1 Dot Country)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract allows the rental of domains under .1.country (”D1DC”) like “The Million Dollar Homepage”: Anyone can take over a domain name by  browsing to a web2 address like foo.1.country and doubling its last price. Currently, a payer owns the domain only for `rentalPeriod`, and is allowed to embed a tweet for the web page. D1DC creates ERC721 tokens for each domain registration.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1956,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2175,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 529,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 531,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 535,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 539,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 543,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 549,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1469,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3070,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "nameInitialized",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 3072,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "baseRentalPrice",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 3074,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "rentalPeriod",
        "offset": 0,
        "slot": "303",
        "type": "t_uint32"
      },
      {
        "astId": 3076,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "priceMultiplier",
        "offset": 4,
        "slot": "303",
        "type": "t_uint32"
      },
      {
        "astId": 3078,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "revenueAccount",
        "offset": 8,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 3108,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "nameRecords",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_bytes32,t_struct(NameRecord)3091_storage)"
      },
      {
        "astId": 3114,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_ownerInfos",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_bytes32,t_struct(OwnerInfo)3098_storage)"
      },
      {
        "astId": 3120,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "emojiReactionPrices",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_enum(EmojiType)3102,t_uint256)"
      },
      {
        "astId": 3128,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "emojiReactionCounters",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_bytes32,t_mapping(t_enum(EmojiType)3102,t_uint256))"
      },
      {
        "astId": 3135,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_telegramRevealAt",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 3142,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_emailRevealAt",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 3149,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_phoneRevealAt",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 3154,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_telegramUpdateAt",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3159,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_emailUpdateAt",
        "offset": 0,
        "slot": "312",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3164,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "_phoneUpdateAt",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3167,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "lastRented",
        "offset": 0,
        "slot": "314",
        "type": "t_string_storage"
      },
      {
        "astId": 3170,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "lastCreated",
        "offset": 0,
        "slot": "315",
        "type": "t_string_storage"
      },
      {
        "astId": 3174,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "keys",
        "offset": 0,
        "slot": "316",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3177,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "urlUpdatePrice",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      },
      {
        "astId": 3180,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "telegramRevealPrice",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 3183,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "emailRevealPrice",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 3186,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "phoneRevealPrice",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 3192,
        "contract": "contracts/D1DCV2.sol:D1DCV2",
        "label": "ownersOfName",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(EmojiType)3102": {
        "encoding": "inplace",
        "label": "enum D1DCV2.EmojiType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_enum(EmojiType)3102,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(enum D1DCV2.EmojiType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(EmojiType)3102,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(NameRecord)3091_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct D1DCV2.NameRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(NameRecord)3091_storage"
      },
      "t_mapping(t_bytes32,t_struct(OwnerInfo)3098_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct D1DCV2.OwnerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerInfo)3098_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(EmojiType)3102,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(EmojiType)3102",
        "label": "mapping(enum D1DCV2.EmojiType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NameRecord)3091_storage": {
        "encoding": "inplace",
        "label": "struct D1DCV2.NameRecord",
        "members": [
          {
            "astId": 3080,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "renter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3082,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "timeUpdated",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3084,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "lastPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3086,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3088,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "prev",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3090,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "next",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OwnerInfo)3098_storage": {
        "encoding": "inplace",
        "label": "struct D1DCV2.OwnerInfo",
        "members": [
          {
            "astId": 3093,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "telegram",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3095,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3097,
            "contract": "contracts/D1DCV2.sol:D1DCV2",
            "label": "phone",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}